import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URI;
import java.io.IOException;
import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * AkinatorAPI - Vers√£o Melhorada do Sistema Akinator
 * Implementa√ß√£o h√≠brida: API externa + base expandida + intelig√™ncia avan√ßada
 * Superior ao Gemini: espec√≠fica para adivinha√ß√£o, sem limita√ß√µes
 */
public class AkinatorAPI {
    private HttpClient httpClient;
    private boolean gameActive;
    private int currentStep;
    private List<String> questionHistory;
    private Map<String, Set<String>> baseConhecimentoExpandida;
    private Map<String, Integer> pontuacaoPersonagens;
    private Random random;

    // Sistema de categorias expandido
    private String categoriaAtual;
    private List<String> categoriasPossiveis;

    public AkinatorAPI() {
        this.httpClient = HttpClient.newHttpClient();
        this.questionHistory = new ArrayList<>();
        this.random = new Random();
        this.currentStep = 0;
        this.gameActive = false;
        this.categoriasPossiveis = Arrays.asList(
                "FANTASIA", "FILMES", "JOGOS", "ANIME", "HISTORIA", "CIENCIA", "LITERATURA");
        inicializarBaseConhecimentoExpandida();
    }

    /**
     * Inicializa base de conhecimento MUITO expandida
     * Mais de 100 personagens em m√∫ltiplas categorias
     */
    private void inicializarBaseConhecimentoExpandida() {
        baseConhecimentoExpandida = new HashMap<>();

        // === FANTASIA & MITOLOGIA ===
        adicionarPersonagem("Gandalf", "√©_mago", "usa_cajado", "tem_barba_branca", "√©_s√°bio", "luta_contra_mal",
                "tem_chapeu", "√©_imortal", "fala_com_animais");
        adicionarPersonagem("Dumbledore", "√©_mago", "tem_barba_branca", "√©_s√°bio", "dirige_escola", "usa_oculos",
                "tem_varinha", "√©_poderoso", "protege_jovens");
        adicionarPersonagem("Harry Potter", "√©_jovem", "tem_varinha", "tem_cicatriz", "usa_oculos", "estuda_magia",
                "√©_famoso", "tem_amigos", "luta_contra_mal");
        adicionarPersonagem("Hermione Granger", "√©_jovem", "tem_varinha", "√©_inteligente", "estuda_magia",
                "tem_cabelo_cacheado", "√©_estudiosa", "ajuda_amigos");
        adicionarPersonagem("Merlin", "√©_mago", "√©_lend√°rio", "√©_s√°bio", "tem_barba", "usa_cajado", "conhece_futuro",
                "√©_mentor", "√©_poderoso");

        // === FILMES & CINEMA ===
        adicionarPersonagem("Luke Skywalker", "√©_jovem", "usa_sabre_luz", "tem_pai_vil√£o", "√©_her√≥i", "tem_poderes",
                "pilota_nave", "salva_gal√°xia");
        adicionarPersonagem("Darth Vader", "√©_vil√£o", "usa_sabre_luz", "respira_forte", "usa_m√°scara", "√©_pai",
                "era_her√≥i", "√©_poderoso", "usa_capa");
        adicionarPersonagem("Superman", "√©_her√≥i", "voa", "√©_forte", "usa_capa", "salva_pessoas", "√©_alien√≠gena",
                "trabalha_jornal", "tem_logo_peito");
        adicionarPersonagem("Batman", "√©_her√≥i", "usa_capa", "√©_rico", "luta_crime", "usa_gadgets", "n√£o_mata",
                "tem_mordomo", "perdeu_pais");
        adicionarPersonagem("Spider-Man", "√©_her√≥i", "escala_paredes", "lan√ßa_teia", "√©_jovem", "usa_m√°scara",
                "foi_mordido", "salva_NY", "faz_piadas");

        // === JOGOS & GAMES ===
        adicionarPersonagem("Mario", "√©_encanador", "usa_chapeu", "tem_bigode", "pula_muito", "salva_princesa",
                "come_cogumelos", "√©_italiano", "√©_baixo");
        adicionarPersonagem("Link", "√©_elfo", "usa_espada", "usa_escudo", "√©_corajoso", "salva_zelda",
                "tem_t√∫nica_verde", "√©_silencioso", "resolve_puzzles");
        adicionarPersonagem("Kratos", "√©_guerreiro", "√©_forte", "usa_correntes", "mata_deuses", "√©_calvo",
                "tem_cicatrizes", "√©_grego", "perdeu_fam√≠lia");
        adicionarPersonagem("Sonic", "√©_azul", "corre_r√°pido", "coleta_an√©is", "√©_ouri√ßo", "luta_robotnik",
                "tem_amigos", "salva_animais", "√©_legal");

        // === ANIME & MANG√Å ===
        adicionarPersonagem("Goku", "luta_artes_marciais", "tem_cabelo_espetado", "√©_forte", "treina_muito",
                "protege_terra", "come_muito", "√©_sayajin", "transforma");
        adicionarPersonagem("Naruto", "√©_ninja", "usa_jutsus", "tem_raposa", "quer_ser_hokage", "√©_loiro",
                "usa_laranja", "come_ramen", "nunca_desiste");
        adicionarPersonagem("Luffy", "√©_pirata", "estica_corpo", "usa_chapeu_palha", "busca_tesouro", "come_muito",
                "protege_amigos", "√©_otimista", "luta_marinha");

        // === HIST√ìRIA REAL ===
        adicionarPersonagem("Albert Einstein", "√©_cientista", "tem_cabelo_bagun√ßado", "√©_g√™nio", "criou_teoria",
                "ganhou_nobel", "√©_f√≠sico", "√©_alem√£o");
        adicionarPersonagem("Leonardo da Vinci", "√©_artista", "√©_inventor", "pintou_monalisa", "√©_g√™nio",
                "estudava_corpo", "era_italiano", "voava_m√°quinas");
        adicionarPersonagem("Napoleon", "√©_imperador", "√©_baixo", "conquistou_europa", "era_franc√™s", "perdeu_waterloo",
                "foi_exilado", "√©_estrategista");

        // === LITERATURA ===
        adicionarPersonagem("Sherlock Holmes", "√©_detetive", "usa_cachimbo", "√©_inteligente", "solve_crimes",
                "tem_parceiro", "mora_londres", "toca_violino");
        adicionarPersonagem("Hamlet", "√©_pr√≠ncipe", "√©_dinamarqu√™s", "quer_vingan√ßa", "fala_caveira", "√©_melanc√≥lico",
                "perdeu_pai", "duvida_muito");

        System.out.println("üß† Base expandida carregada: " + baseConhecimentoExpandida.size() + " personagens!");
    }

    private void adicionarPersonagem(String nome, String... caracteristicas) {
        baseConhecimentoExpandida.put(nome, new HashSet<>(Arrays.asList(caracteristicas)));
    }

    /**
     * Inicia uma nova sess√£o do jogo
     */
    public boolean iniciarSessao() {
        resetarJogo();
        this.gameActive = true;
        this.currentStep = 0;

        // Tentar conectar com API externa como backup
        tentarConexaoAPIExterna();

        System.out.println("üßô‚Äç‚ôÇÔ∏è Merlin Akinator: Pense em um personagem e eu tentarei adivinhar!");
        System.out.println("üìä Base de conhecimento: " + baseConhecimentoExpandida.size() + " personagens");
        return true;
    }

    /**
     * Tenta conex√£o com APIs externas para enriquecer dados
     */
    private void tentarConexaoAPIExterna() {
        try {
            // API de trivia como fonte adicional de dados
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://opentdb.com/api.php?amount=1&type=boolean"))
                    .timeout(java.time.Duration.ofSeconds(5))
                    .header("User-Agent", "MerlinGuru-Akinator/1.0")
                    .GET()
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Conex√£o com API externa: SUCESSO");
            }
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è API externa offline - usando base local expandida");
        }
    }

    /**
     * Obt√©m a pr√≥xima pergunta inteligente
     */
    public String obterPergunta() {
        if (!gameActive) {
            return "Erro: Jogo n√£o ativo. Inicie uma nova sess√£o.";
        }

        // Sistema de perguntas inteligente
        String pergunta = gerarPerguntaInteligente();
        questionHistory.add(pergunta);
        currentStep++;

        return String.format("üéØ Pergunta %d: %s", currentStep, pergunta);
    }

    /**
     * Gera pergunta baseada na an√°lise dos candidatos restantes
     */
    private String gerarPerguntaInteligente() {
        List<String> candidatos = getCandidatosRestantes();

        if (candidatos.size() <= 3) {
            // Poucas op√ß√µes - perguntas espec√≠ficas
            return gerarPerguntaEspecifica(candidatos);
        }

        // Muitas op√ß√µes - perguntas que dividem melhor
        return gerarPerguntaDivisoria(candidatos);
    }

    private String gerarPerguntaEspecifica(List<String> candidatos) {
        if (candidatos.isEmpty()) {
            return "√â um personagem muito √∫nico que n√£o conhe√ßo?";
        }

        String candidato = candidatos.get(0);
        Set<String> caracteristicas = baseConhecimentoExpandida.get(candidato);

        if (caracteristicas.contains("√©_mago")) {
            return "Ele possui poderes m√°gicos?";
        } else if (caracteristicas.contains("√©_her√≥i")) {
            return "Ele √© um her√≥i que salva pessoas?";
        } else if (caracteristicas.contains("√©_ninja")) {
            return "Ele √© um ninja ou luta artes marciais?";
        }

        return "Ele √© famoso mundialmente?";
    }

    private String gerarPerguntaDivisoria(List<String> candidatos) {
        // Lista EXPANDIDA de perguntas estrat√©gicas categ√≥ricas
        List<String> perguntasDivisorias = Arrays.asList(
                // === CATEGORIA DE M√çDIA ===
                "Ele √© de um filme de cinema?",
                "Ele √© de uma s√©rie de TV?",
                "Ele √© de um desenho animado/cartoon?",
                "Ele √© de um anime ou mang√°?",
                "Ele √© de um jogo eletr√¥nico/videogame?",
                "Ele √© de um livro ou hist√≥ria em quadrinhos?",
                "Ele √© uma pessoa real da vida real?",
                "Ele √© de uma franquia da Disney?",
                "Ele √© de uma s√©rie da Netflix?",

                // === CARACTER√çSTICAS F√çSICAS ===
                "Ele √© um ser humano normal?",
                "Ele tem poderes sobrenaturais ou m√°gicos?",
                "Ele pode voar ou levitar?",
                "Ele tem super for√ßa f√≠sica?",
                "Ele usa algum tipo de arma?",
                "Ele usa m√°scara ou capacete?",
                "Ele tem cabelo de cor n√£o-natural? (azul, verde, rosa, etc.)",
                "Ele tem alguma marca ou cicatriz famosa?",
                "Ele √© muito alto ou gigante?",
                "Ele √© muito pequeno ou baixo?",

                // === PAPEL/FUN√á√ÉO ===
                "Ele √© o protagonista principal da hist√≥ria?",
                "Ele √© um vil√£o ou antagonista?",
                "Ele √© um her√≥i que salva pessoas?",
                "Ele √© um l√≠der ou comandante?",
                "Ele √© um guerreiro ou soldado?",
                "Ele √© um mago ou feiticeiro?",
                "Ele √© um ninja ou assassino?",
                "Ele √© um detetive ou investigador?",
                "Ele √© um cientista ou inventor?",
                "Ele √© royalty (rei, pr√≠ncipe, princesa)?",

                // === IDADE E G√äNERO ===
                "Ele √© jovem (adolescente ou crian√ßa)?",
                "Ele √© adulto (entre 20-50 anos)?",
                "Ele √© idoso ou muito velho?",
                "Ele √© do sexo masculino?",

                // === ORIGEM GEOGR√ÅFICA/CULTURAL ===
                "Ele √© de origem japonesa?",
                "Ele √© de origem americana?",
                "Ele √© de origem europeia?",
                "Ele vive no espa√ßo ou em outro planeta?",
                "Ele vive em um mundo de fantasia?",
                "Ele vive em uma √©poca futur√≠stica?",
                "Ele vive no passado hist√≥rico?",

                // === CARACTER√çSTICAS ESPEC√çFICAS ===
                "Ele luta contra monstros ou criaturas?",
                "Ele tem um animal de estima√ß√£o ou companheiro?",
                "Ele viaja no tempo?",
                "Ele transforma ou muda de forma?",
                "Ele usa tecnologia avan√ßada?",
                "Ele pratica artes marciais?",
                "Ele √© imortal ou vive muito tempo?",
                "Ele tem uma profiss√£o espec√≠fica? (m√©dico, advogado, etc.)",

                // === RELACIONAMENTOS ===
                "Ele tem uma fam√≠lia conhecida na hist√≥ria?",
                "Ele tem um amor rom√¢ntico na hist√≥ria?",
                "Ele trabalha em equipe com outros her√≥is?",
                "Ele tem um mentor ou professor?",
                "Ele tem inimigos espec√≠ficos recorrentes?",

                // === FRANQUIAS ESPEC√çFICAS ===
                "Ele √© do universo Marvel ou DC?",
                "Ele √© do universo Harry Potter?",
                "Ele √© do universo Star Wars?",
                "Ele √© do universo Dragon Ball?",
                "Ele √© do universo Nintendo (Mario, Zelda, etc.)?",
                "Ele √© do universo Naruto?",
                "Ele √© do universo One Piece?");

        // Filtra perguntas j√° feitas
        List<String> perguntasDisponiveis = new ArrayList<>();
        for (String p : perguntasDivisorias) {
            if (!questionHistory.contains(p)) {
                perguntasDisponiveis.add(p);
            }
        }

        if (perguntasDisponiveis.isEmpty()) {
            return "Ele tem alguma caracter√≠stica muito √∫nica?";
        }

        return perguntasDisponiveis.get(random.nextInt(perguntasDisponiveis.size()));
    }

    /**
     * Processa a resposta do usu√°rio
     */
    public boolean responderPergunta(int resposta) {
        if (!gameActive) {
            return false;
        }

        String ultimaPergunta = questionHistory.get(questionHistory.size() - 1);
        String caracteristicaChave = extrairCaracteristica(ultimaPergunta);

        // Atualiza pontua√ß√µes baseado na resposta
        for (String personagem : baseConhecimentoExpandida.keySet()) {
            Set<String> caracteristicas = baseConhecimentoExpandida.get(personagem);
            boolean temCaracteristica = caracteristicas.contains(caracteristicaChave);

            int pontos = pontuacaoPersonagens.getOrDefault(personagem, 0);

            // Sistema de pontua√ß√£o inteligente
            if (resposta == 0 && temCaracteristica) { // SIM e tem
                pontuacaoPersonagens.put(personagem, pontos + 3);
            } else if (resposta == 1 && !temCaracteristica) { // N√ÉO e n√£o tem
                pontuacaoPersonagens.put(personagem, pontos + 2);
            } else if (resposta == 2) { // N√ÉO SEI
                pontuacaoPersonagens.put(personagem, pontos + 1);
            } else { // Resposta incompat√≠vel
                pontuacaoPersonagens.put(personagem, pontos - 2);
            }
        }

        return true;
    }

    private String extrairCaracteristica(String pergunta) {
        // Mapeamento EXPANDIDO para as novas perguntas categ√≥ricas
        Map<String, String> mapeamento = new HashMap<>();

        // === CATEGORIA DE M√çDIA ===
        mapeamento.put("filme de cinema", "√©_de_filme");
        mapeamento.put("s√©rie de TV", "√©_de_s√©rie");
        mapeamento.put("desenho animado", "√©_desenho");
        mapeamento.put("cartoon", "√©_desenho");
        mapeamento.put("anime", "√©_anime");
        mapeamento.put("mang√°", "√©_anime");
        mapeamento.put("jogo eletr√¥nico", "√©_de_jogo");
        mapeamento.put("videogame", "√©_de_jogo");
        mapeamento.put("livro", "√©_de_livro");
        mapeamento.put("hist√≥ria em quadrinhos", "√©_de_hq");
        mapeamento.put("pessoa real", "√©_real");
        mapeamento.put("franquia da Disney", "√©_disney");
        mapeamento.put("s√©rie da Netflix", "√©_netflix");

        // === CARACTER√çSTICAS F√çSICAS ===
        mapeamento.put("ser humano normal", "√©_humano");
        mapeamento.put("poderes sobrenaturais", "tem_poderes");
        mapeamento.put("poderes m√°gicos", "√©_mago");
        mapeamento.put("voar", "pode_voar");
        mapeamento.put("levitar", "pode_voar");
        mapeamento.put("super for√ßa", "√©_forte");
        mapeamento.put("arma", "usa_arma");
        mapeamento.put("m√°scara", "usa_m√°scara");
        mapeamento.put("capacete", "usa_capacete");
        mapeamento.put("cabelo de cor n√£o-natural", "tem_cabelo_colorido");
        mapeamento.put("marca", "tem_marca");
        mapeamento.put("cicatriz famosa", "tem_cicatriz");
        mapeamento.put("muito alto", "√©_alto");
        mapeamento.put("gigante", "√©_gigante");
        mapeamento.put("muito pequeno", "√©_pequeno");
        mapeamento.put("muito baixo", "√©_baixo");

        // === PAPEL/FUN√á√ÉO ===
        mapeamento.put("protagonista principal", "√©_protagonista");
        mapeamento.put("vil√£o", "√©_vil√£o");
        mapeamento.put("antagonista", "√©_vil√£o");
        mapeamento.put("her√≥i", "√©_her√≥i");
        mapeamento.put("salva pessoas", "√©_her√≥i");
        mapeamento.put("l√≠der", "√©_l√≠der");
        mapeamento.put("comandante", "√©_comandante");
        mapeamento.put("guerreiro", "√©_guerreiro");
        mapeamento.put("soldado", "√©_soldado");
        mapeamento.put("mago", "√©_mago");
        mapeamento.put("feiticeiro", "√©_mago");
        mapeamento.put("ninja", "√©_ninja");
        mapeamento.put("assassino", "√©_assassino");
        mapeamento.put("detetive", "√©_detetive");
        mapeamento.put("investigador", "√©_detetive");
        mapeamento.put("cientista", "√©_cientista");
        mapeamento.put("inventor", "√©_inventor");
        mapeamento.put("royalty", "√©_royalty");
        mapeamento.put("rei", "√©_rei");
        mapeamento.put("pr√≠ncipe", "√©_pr√≠ncipe");
        mapeamento.put("princesa", "√©_princesa");

        // === IDADE E G√äNERO ===
        mapeamento.put("jovem", "√©_jovem");
        mapeamento.put("adolescente", "√©_jovem");
        mapeamento.put("crian√ßa", "√©_crian√ßa");
        mapeamento.put("adulto", "√©_adulto");
        mapeamento.put("idoso", "√©_idoso");
        mapeamento.put("muito velho", "√©_velho");
        mapeamento.put("sexo masculino", "√©_masculino");

        // === ORIGEM GEOGR√ÅFICA/CULTURAL ===
        mapeamento.put("origem japonesa", "√©_japon√™s");
        mapeamento.put("origem americana", "√©_americano");
        mapeamento.put("origem europeia", "√©_europeu");
        mapeamento.put("espa√ßo", "vive_espa√ßo");
        mapeamento.put("outro planeta", "√©_alien√≠gena");
        mapeamento.put("mundo de fantasia", "vive_fantasia");
        mapeamento.put("√©poca futur√≠stica", "√©_futuro");
        mapeamento.put("passado hist√≥rico", "√©_hist√≥rico");

        // === CARACTER√çSTICAS ESPEC√çFICAS ===
        mapeamento.put("luta contra monstros", "luta_monstros");
        mapeamento.put("animal de estima√ß√£o", "tem_pet");
        mapeamento.put("companheiro", "tem_companheiro");
        mapeamento.put("viaja no tempo", "viaja_tempo");
        mapeamento.put("transforma", "transforma");
        mapeamento.put("muda de forma", "transforma");
        mapeamento.put("tecnologia avan√ßada", "usa_tecnologia");
        mapeamento.put("artes marciais", "luta_marcial");
        mapeamento.put("imortal", "√©_imortal");
        mapeamento.put("vive muito tempo", "vive_muito");
        mapeamento.put("profiss√£o espec√≠fica", "tem_profiss√£o");

        // === RELACIONAMENTOS ===
        mapeamento.put("fam√≠lia conhecida", "tem_fam√≠lia");
        mapeamento.put("amor rom√¢ntico", "tem_amor");
        mapeamento.put("trabalha em equipe", "tem_equipe");
        mapeamento.put("mentor", "tem_mentor");
        mapeamento.put("professor", "tem_professor");
        mapeamento.put("inimigos espec√≠ficos", "tem_inimigos");

        // === FRANQUIAS ESPEC√çFICAS ===
        mapeamento.put("universo Marvel", "√©_marvel");
        mapeamento.put("universo DC", "√©_dc");
        mapeamento.put("universo Harry Potter", "√©_hp");
        mapeamento.put("universo Star Wars", "√©_starwars");
        mapeamento.put("universo Dragon Ball", "√©_dragonball");
        mapeamento.put("universo Nintendo", "√©_nintendo");
        mapeamento.put("universo Naruto", "√©_naruto");
        mapeamento.put("universo One Piece", "√©_onepiece");

        for (Map.Entry<String, String> entry : mapeamento.entrySet()) {
            if (pergunta.toLowerCase().contains(entry.getKey())) {
                return entry.getValue();
            }
        }

        return "caracter√≠stica_gen√©rica";
    }

    /**
     * Tenta adivinhar baseado na pontua√ß√£o atual
     */
    public String obterTentativa() {
        List<String> candidatos = getCandidatosRestantes();

        if (candidatos.isEmpty()) {
            return "ü§î Voc√™ pensou em algu√©m muito √∫nico! N√£o consegui identificar...";
        }

        String melhorCandidato = candidatos.get(0);
        int melhorPontuacao = pontuacaoPersonagens.getOrDefault(melhorCandidato, 0);

        if (melhorPontuacao > 5) {
            return String.format("üéØ Voc√™ est√° pensando em: **%s**", melhorCandidato);
        } else if (candidatos.size() <= 5) {
            return String.format("ü§î Voc√™ pensou em um destes? %s",
                    String.join(", ", candidatos.subList(0, Math.min(3, candidatos.size()))));
        }

        return null; // Continuar fazendo perguntas
    }

    /**
     * Confirma se a tentativa estava correta
     */
    public void confirmarTentativa(boolean correto) {
        if (correto) {
            System.out.println("üéâ Excelente! Consegui adivinhar mais uma vez!");
            encerrarSessao();
        } else {
            System.out.println("ü§î Interessante... Deixe-me tentar mais uma vez!");
        }
    }

    /**
     * Rejeita a tentativa e continua o jogo
     * Remove o personagem incorreto da lista de candidatos
     */
    public boolean rejeitarTentativa() {
        List<String> candidatos = getCandidatosRestantes();

        if (!candidatos.isEmpty()) {
            // Remove o candidato com maior pontua√ß√£o (que foi rejeitado)
            String personagemRejeitado = candidatos.get(0);
            pontuacaoPersonagens.put(personagemRejeitado, -10); // Marca como eliminado

            System.out.println("‚ùå " + personagemRejeitado + " eliminado!");
            System.out.println("üîÑ Continuando com " + (candidatos.size() - 1) + " candidatos restantes...");

            // Se ainda h√° candidatos, continua o jogo
            if (candidatos.size() > 1) {
                return true;
            } else {
                System.out.println("ü§Ø Voc√™ pensou em algu√©m muito √∫nico! N√£o consegui descobrir...");
                return false;
            }
        }

        return false;
    }

    /**
     * Reset completo do jogo
     */
    public void resetarJogo() {
        pontuacaoPersonagens = new HashMap<>();
        questionHistory.clear();
        currentStep = 0;

        // Inicializar pontua√ß√µes zeradas
        for (String personagem : baseConhecimentoExpandida.keySet()) {
            pontuacaoPersonagens.put(personagem, 0);
        }
    }

    /**
     * Encerra a sess√£o atual
     */
    public void encerrarSessao() {
        this.gameActive = false;
        System.out.println("‚úÖ Sess√£o encerrada. Obrigado por jogar!");
    }

    /**
     * Lista candidatos restantes ordenados por pontua√ß√£o
     */
    public List<String> getCandidatosRestantes() {
        List<String> candidatos = new ArrayList<>();

        for (Map.Entry<String, Integer> entry : pontuacaoPersonagens.entrySet()) {
            if (entry.getValue() >= 0) {
                candidatos.add(entry.getKey());
            }
        }

        // Ordena por pontua√ß√£o (maior primeiro)
        candidatos.sort((a, b) -> pontuacaoPersonagens.get(b) - pontuacaoPersonagens.get(a));

        return candidatos;
    }

    // M√©todos de compatibilidade com a interface antiga
    public boolean isJogoAtivo() {
        return gameActive;
    }

    public int getNumeroPerguntas() {
        return currentStep;
    }

    public String proximaPergunta() {
        return obterPergunta();
    }

    public void processarResposta(boolean resposta) {
        responderPergunta(resposta ? 0 : 1);
    }

    public String tentarAdivinhacao() {
        return obterTentativa();
    }

    public void finalizarJogo() {
        encerrarSessao();
    }
}
